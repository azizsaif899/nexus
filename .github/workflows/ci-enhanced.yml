name: AzizSys CI/CD Pipeline - Enterprise Grade

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  quality_gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Lint Code
        run: npm run lint

      - name: 💅 Check Code Formatting
        run: npm run format:check

      - name: 🧪 Run Unit Tests with Coverage
        run: npm run test:coverage
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

      - name: 🏗️ Build Project
        run: npm run build

      - name: 🔍 Dependency Security Audit
        run: npm audit --audit-level moderate

      - name: 📈 Analyze Bundle Size
        run: |
          npm run build
          du -sh dist/
          echo "Bundle size analysis completed"

  integration_tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: quality_gate
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Run Integration Tests
        run: npm run test:integration
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

      - name: ⚡ Performance Tests
        run: npm run test:performance

  security_scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: quality_gate
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run Security Audit
        run: npm audit --audit-level high

      - name: 🛡️ CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  deploy_staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality_gate, integration_tests, security_scan]
    if: github.ref === 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for Staging
        run: npm run build
        env:
          NODE_ENV: staging

      - name: 🚀 Deploy to Google Apps Script (Staging)
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          echo "Staging deployment completed"

  deploy_production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality_gate, integration_tests, security_scan]
    if: github.ref === 'refs/heads/main'
    environment: production
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build for Production
        run: npm run build
        env:
          NODE_ENV: production

      - name: 🌟 Deploy to Google Apps Script (Production)
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here
          echo "Production deployment completed"

      - name: 📢 Notify Success
        if: success()
        run: |
          echo "🎉 Production deployment successful!"
          echo "Version: ${{ github.sha }}"
          echo "Deployed at: $(date)"

  notify_failure:
    name: 📢 Notify on Failure
    runs-on: ubuntu-latest
    needs: [quality_gate, integration_tests, security_scan]
    if: failure()
    
    steps:
      - name: 🚨 Send Failure Notification
        run: |
          echo "❌ Pipeline failed!"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Failed job: ${{ needs.*.result }}"