// Health check test for packages/core/core-logic/src
// Auto-generated by ProductionFixer

describe('packages/core/core-logic/src Health Check', () => {
  test('directory structure exists', () => {
    expect(true).toBe(true);
  });
  
  test('no console.log in production files', () => {
    // This test ensures console.log statements are removed
    const fs = require('fs');
    const path = require('path');
    
    function checkDirectory(dirPath) {
      const files = fs.readdirSync(dirPath, { withFileTypes: true });
      
      for (const file of files) {
        const fullPath = path.join(dirPath, file.name);
        
        if (file.isDirectory() && !file.name.startsWith('.')) {
          checkDirectory(fullPath);
        } else if (file.name.endsWith('.ts') || file.name.endsWith('.js')) {
          const content = fs.readFileSync(fullPath, 'utf8');
          expect(content).not.toMatch(/console\.log/);
        }
      }
    }
    
    checkDirectory(__dirname);
  });
  
  test('no innerHTML usage without sanitization', () => {
    const fs = require('fs');
    const path = require('path');
    
    function checkForInnerHTML(dirPath) {
      const files = fs.readdirSync(dirPath, { withFileTypes: true });
      
      for (const file of files) {
        const fullPath = path.join(dirPath, file.name);
        
        if (file.isDirectory() && !file.name.startsWith('.')) {
          checkForInnerHTML(fullPath);
        } else if (file.name.endsWith('.ts') || file.name.endsWith('.tsx')) {
          const content = fs.readFileSync(fullPath, 'utf8');
          // Allow innerHTML only with sanitization comments
          const unsafeInnerHTML = content.match(/\.innerHTML\s*=(?!.*\/\*.*sanitiz)/gi);
          expect(unsafeInnerHTML).toBeNull();
        }
      }
    }
    
    checkForInnerHTML(__dirname);
  });
});