// *************************************************************************************************
// --- START OF FILE: src/dev_tools/advanced_repair.js (ESM Compliant) ---
// *************************************************************************************************

/**
 * @file advanced_repair.js
 * @module System.Dev.AdvancedRepair
 * @version 0.2.1
 * @author ÿπÿ®ÿØÿßŸÑÿπÿ≤Ÿäÿ≤
 * @description
 * Comprehensive project analysis and reporting tool:
 * - üîß Enhanced structural inspection using AST
 * - üß† Contextual analysis of imports and scope
 * - üß™ Problem categorization by severity
 * - ü§ñ Intelligent fix suggestions (simulation and actual application)
 * - üõ°Ô∏è Secure application of fixes with restore points
 * - üîÑ Skips corrupted files and continues reporting
 */

import { promises as fs } from 'fs';
import path from 'path';
import { parse } from '@babel/parser';
import traverse from '@babel/traverse';
import IntelligentReviewManager from './intelligent_review_manager.js';

const SRC_DIR = path.join(process.cwd(), 'src');
const REPORT_DIR = path.join(process.cwd(), 'docs', 'repair_reports');
const DEFAULT_FILE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.gs'];
const SEVERITY_LEVELS = {
  CRITICAL: 50,
  HIGH: 40,
  MEDIUM: 15,
  LOW: 1,
};

class AdvancedRepairAgent {
  constructor() {
    this.allIssues = [];
    this.skippedFiles = [];
    this.appliedFixes = [];
    this.dryRun = true;
    this.intelligentReviewer = new IntelligentReviewManager();
  }

  /**
   * Scans the project, reports issues, and optionally applies fixes.
   * @param {Object} options - Configuration options.
   * @param {string} options.srcDir - Source directory to scan. Defaults to SRC_DIR.
   * @param {string} options.reportDir - Report directory. Defaults to REPORT_DIR.
   * @param {boolean} options.applyFixes - Whether to apply fixes. Defaults to false.
   */
  async scanAndReport({ srcDir = SRC_DIR, reportDir = REPORT_DIR, applyFixes = false } = {}) {
    this.allIssues = [];
    this.skippedFiles = [];
    this.appliedFixes = [];
    this.dryRun = !applyFixes;

    console.log(`\nüöÄ Starting project analysis (${this.dryRun ? 'Dry Run' : 'Applying Fixes'})`);
    
    // ÿ™ŸáŸäÿ¶ÿ© ÿßŸÑŸÖÿ±ÿßÿ¨ÿπ ÿßŸÑÿ∞ŸÉŸä
    const intelligentInitialized = await this.intelligentReviewer.initialize();
    if (intelligentInitialized) {
      console.log('üß† ÿ™ŸÖ ÿ™ŸÅÿπŸäŸÑ ŸÜÿ∏ÿßŸÖ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ∞ŸÉŸäÿ©');
    }
    
    const startTime = process.hrtime.bigint();

    try {
      const files = await this._collectFiles(srcDir);
      console.log(`üîç Number of files to scan: ${files.length}`);

      for (const filePath of files) {
        await this._tryAnalyze(filePath);
        
        // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ∞ŸÉŸäÿ©
        if (intelligentInitialized) {
          try {
            const intelligentIssues = await this.intelligentReviewer.reviewFile(filePath);
            console.log(`üß† ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ∞ŸÉŸäÿ©: ${intelligentIssues.length} ŸÖÿ¥ŸÉŸÑÿ© ŸÅŸä ${path.basename(filePath)}`);
          } catch (error) {
            console.warn(`‚ö†Ô∏è ŸÅÿ¥ŸÑ ÿßŸÑŸÖÿ±ÿßÿ¨ÿπÿ© ÿßŸÑÿ∞ŸÉŸäÿ© ŸÑŸÄ ${filePath}:`, error.message);
          }
        }
      }

      const sortedIssues = this.allIssues
        .map((issue, index) => ({ ...issue, priority: issue.severity, index }))
        .sort((a, b) => b.priority - a.priority);

      console.log(`‚úÖ Found ${sortedIssues.length} issues`);
      if (this.skippedFiles.length) {
        console.warn(`‚ö†Ô∏è Skipped ${this.skippedFiles.length} files due to errors`);
      }

      if (!this.dryRun) {
        for (const issue of sortedIssues) {
          if (issue.fixable && issue.suggestedFix) {
            try {
              await this._applyFix(issue);
            } catch (error) {
              console.error(`‚ùå Failed to fix ${issue.type} in ${issue.file}: ${error.message}`);
            }
          }
        }
        console.log(`üõ†Ô∏è Successfully applied ${this.appliedFixes.length} fixes`);
      }

      const md = this._generateMarkdownReport(sortedIssues);
      
      // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿ™ŸÇÿ±Ÿäÿ± ÿßŸÑÿ∞ŸÉŸä
      let intelligentReport = '';
      if (intelligentInitialized) {
        intelligentReport = this.intelligentReviewer.generateIntelligentReport();
      }
      
      const combinedReport = intelligentReport + '\n\n---\n\n' + md;
      
      await fs.mkdir(reportDir, { recursive: true });
      const reportPath = path.join(reportDir, `intelligent_repair_${new Date().toISOString().replace(/[:.]/g, '-')}.md`);
      await fs.writeFile(reportPath, combinedReport, 'utf8');

      const endTime = process.hrtime.bigint();
      const duration = Number(endTime - startTime) / 1_000_000;
      const stats = await fs.stat(reportPath);

      console.log(`üìÑ Report saved to: ${reportPath}`);
      console.log(`üìè Size: ${stats.size} bytes`);
      console.log(`‚è±Ô∏è Duration: ${duration.toFixed(2)} ms`);
    } catch (err) {
      console.error('‚ùå General tool failure:', err);
    } finally {
      console.log('üèÅ Finished execution');
    }
  }

  /**
   * Collects all files with specified extensions from a directory recursively.
   * @param {string} dir - The directory to scan.
   * @returns {Promise<string[]>} - A promise that resolves to an array of file paths.
   */
  async _collectFiles(dir) {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    let files = [];

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        files.push(...await this._collectFiles(fullPath));
      } else if (DEFAULT_FILE_EXTENSIONS.includes(path.extname(entry.name).toLowerCase())) {
        files.push(fullPath);
      }
    }

    return files;
  }

  /**
   * Attempts to analyze a file for issues.
   * @param {string} filePath - The path to the file.
   */
  async _tryAnalyze(filePath) {
    const relativePath = path.relative(process.cwd(), filePath);
    try {
      const issues = [];
      const content = await fs.readFile(filePath, 'utf8');

      const ast = parse(content, {
        sourceType: 'unambiguous',
        plugins: ['jsx', 'typescript'],
        errorRecovery: true,
        allowReturnOutsideFunction: true,
      });

      if (ast.errors?.length) {
        ast.errors.forEach(err => {
          const isMissingComma = err.message.toLowerCase().includes('missing comma');

          issues.push(this._createIssue({
            type: 'SyntaxError',
            severity: SEVERITY_LEVELS.CRITICAL,
            message: err.message,
            file: relativePath,
            line: err.loc?.line ?? null,
            codeSnippet: this._getCodeSnippet(content, err.loc),
            fixable: isMissingComma,
            suggestedFix: isMissingComma ? { action: 'ADD_COMMA_BEFORE' } : null,
          }));
        });
      }

      traverse.default(ast, this._createTraversalVisitors(content, issues, relativePath));

      if (issues.length) {
        this.allIssues.push(...issues);
      }
    } catch (err) {
      this.skippedFiles.push({ file: relativePath, reason: err.message });
    }
  }

  /**
   * Creates an issue object.
   * @param {Object} issueData - The issue data.
   * @param {string} issueData.type - The type of issue.
   * @param {number} issueData.severity - The severity level.
   * @param {string} issueData.message - The issue message.
   * @param {string} issueData.file - The file where the issue was found.
   * @param {number} issueData.line - The line number.
   * @param {string} issueData.codeSnippet - The code snippet.
   * @param {boolean} issueData.fixable - Whether the issue is fixable.
   * @param {Object} issueData.suggestedFix - The suggested fix.
   * @returns {Object} - The issue object.
   */
  _createIssue({ type, severity, message, file, line, codeSnippet, fixable = false, suggestedFix = null }) {
    return { type, severity, message, file, line, codeSnippet, fixable, suggestedFix };
  }

  /**
   * Creates the AST traversal visitors.
   * @param {string} content - The file content.
   * @param {Array} issues - The array to store issues.
   * @param {string} file - The file path.
   * @returns {Object} - The traversal visitors.
   */
  _createTraversalVisitors(content, issues, file) {
    return {
      Identifier: path => {
        if (path.node.name === 'eval') {
          issues.push(this._createIssue({
            type: 'SecurityRisk',
            severity: SEVERITY_LEVELS.HIGH,
            message: 'Using eval is unsafe',
            file,
            line: path.node.loc?.start.line,
            codeSnippet: this._getCodeSnippet(content, path.node.loc),
            fixable: false,
          }));
        } else if (path.node.name === 'var') {
          issues.push(this._createIssue({
            type: 'DeprecatedSyntax',
            severity: SEVERITY_LEVELS.LOW,
            message: 'Using var is outdated, prefer let or const',
            file,
            line: path.node.loc?.start.line,
            codeSnippet: this._getCodeSnippet(content, path.node.loc),
            fixable: true,
            suggestedFix: { action: 'REPLACE_VAR_WITH_LET' },
          }));
        }
      }
    };
  }

  /**
   * Gets a code snippet from the content.
   * @param {string} content - The file content.
   * @param {Object} loc - The location object.
   * @returns {string} - The code snippet.
   */
  _getCodeSnippet(content, loc) {
    if (!loc?.start?.line) return null;
    const lines = content.split('\n');
    return lines[loc.start.line - 1]?.trim() || '';
  }

  /**
   * Applies a fix to a file.
   * @param {Object} issue - The issue object.
   */
  async _applyFix(issue) {
    const filePath = path.join(process.cwd(), issue.file);
    let content;
    try {
      content = await fs.readFile(filePath, 'utf8');
    } catch (error) {
      throw new Error(`Failed to read file: ${error.message}`);
    }

    let newContent = content;
    const lines = content.split('\n');

    if (issue.suggestedFix?.action === 'ADD_COMMA_BEFORE' && issue.line) {
      let lineIndex = issue.line - 1;
      // Find the last non-empty line to add the comma to
      while (lineIndex > 0 && lines[lineIndex].trim() === '') {
        lineIndex--;
      }
      lines[lineIndex] = lines[lineIndex].trimEnd() + ',';
      newContent = lines.join('\n');
      console.log(`üîß Added comma in ${issue.file} at line ${lineIndex + 1}`);
    }

    if (issue.suggestedFix?.action === 'REPLACE_VAR_WITH_LET') {
      // Replace all occurrences of 'var' with 'let'
      newContent = content.replace(/\bvar\b/g, 'let');
      console.warn(`üß™ Replaced 'var' with 'let' in ${issue.file}`);
    }

    if (newContent !== content) {
      const backupPath = await this._createRestorePoint(filePath);
      try {
        await fs.writeFile(filePath, newContent, 'utf8');
        this.appliedFixes.push({ file: issue.file, type: issue.type, backup: backupPath });
        console.log(`‚úÖ Fixed: ${issue.type} in ${issue.file}`);
      } catch (error) {
        console.error(`‚ùå Write failed, reverting...`);
        await fs.copyFile(backupPath, filePath); // Revert to the backup
        throw error; // Re-throw the error to be caught by the main loop
      }
    }
  }

  /**
   * Creates a restore point (backup) for a file.
   * @param {string} filePath - The path to the file.
   * @returns {Promise<string>} - The path to the backup file.
   */
  async _createRestorePoint(filePath) {
    const backupPath = `${filePath}.${Date.now()}.bak`;
    await fs.copyFile(filePath, backupPath);
    return backupPath;
  }

  /**
   * Generates a markdown report of the issues.
   * @param {Array} issues - The array of issues.
   * @returns {string} - The markdown report.
   */
  _generateMarkdownReport(issues) {
    let md = '# Repair Summary\n\n';

    if (issues.length === 0) {
      md += 'No issues found.\n';
      return md;
    }

    md += `Found ${issues.length} issues.\n\n`;
    md += '| Priority | Type | File | Line | Message |\n';
    md += '|---|---|---|---|---|\n';

    issues.forEach(issue => {
      md += `| ${issue.severity} | ${issue.type} | ${issue.file} | ${issue.line || 'N/A'} | ${issue.message} |\n`;
    });

    return md;
  }
}

export default AdvancedRepairAgent;

// --- END OF FILE: src/dev_tools/advanced_repair.js ---
// *************************************************************************************************