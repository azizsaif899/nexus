/// *************************************************************************************************
// --- START OF FILE: src/dev_tools/advanced_repair.js ---
// *************************************************************************************************

/**
 * @file advanced_repair.js
 * @module System.Dev.AdvancedRepair
 * @version 1.0.0
 * @author عبدالعزيز
 * @description
 * أداة تحليل وتقرير متكاملة للمشروع (لبيئة Node.js):
 * - 🔧 فحص بنيوي معزز باستخدام AST.
 * - 🧠 تحليل سياقي للاستيراد والمجال (Simulated for this context).
 * - 🧪 تصنيف ذكي للمشاكل حسب الخطورة.
 * - 🤖 اقتراح إصلاحات ذكية (محاكاة).
 * - 🛡️ تطبيق آمن للإصلاحات مع نقاط استعادة.
 * - 🔄 يتجاوز الملفات المعطوبة ويستمر في التقرير.
 */

import { promises as fs } from 'fs';
import path from 'path';
import { parse } from '@babel/parser';
import traverse from '@babel/traverse';
import generate from '@babel/generator'; // لإنشاء الكود من AST بعد التعديلات

// Directories (assuming this script runs from project root)
const SRC_DIR = path.join(process.cwd(), 'src'); // أو حسب مسار الكود المصدري الفعلي
const REPORT_DIR = path.join(process.cwd(), 'docs', 'repair_reports'); // مجلد خاص بالتقارير

// Default file extensions to scan
const DEFAULT_FILE_EXTENSIONS = ['.js', '.jsx', '.ts', '.tsx', '.gs']; // أضف .gs لملفات Apps Script

// Severity Levels as per your charter
const SEVERITY_LEVELS = {
  CRITICAL: 50, // أخطاء تركيبية، أمنية خطيرة
  HIGH: 40,     // استخدام eval، وصول مباشر لـ DOM في GAS
  MEDIUM: 15,   // دوال طويلة، استخدام APIs مهملة
  LOW: 1,       // أقواس فارغة، مسافات بيضاء غير ضرورية
};

// --- Custom Error Classes for clarity ---
class AnalysisError extends Error {
  constructor(message, filePath, line = 0) {
    super(message);
    this.filePath = filePath;
    this.line = line;
    this.name = 'AnalysisError';
  }
}

class FixApplicationError extends Error {
  constructor(message, originalError) {
    super(message);
    this.originalError = originalError;
    this.name = 'FixApplicationError';
  }
}

// --- Core Repair Agent Logic ---
class AdvancedRepairAgent {
  constructor() {
    this.allIssues = [];
    this.skippedFiles = [];
    this.appliedFixes = [];
    this.dryRun = true; // وضع التشغيل التجريبي الافتراضي
  }

  /**
   * ينقطة الدخول الرئيسية للتحليل وإنشاء التقرير.
   * @param {object} options
   * @param {string} [options.srcDir=SRC_DIR] - المسار لجذر الكود المصدري.
   * @param {string} [options.reportDir=REPORT_DIR] - المسار لحفظ التقارير.
   * @param {boolean} [options.applyFixes=false] - هل يجب تطبيق الإصلاحات المقترحة؟
   * @returns {Promise<void>}
   */
  async scanAndReport({ srcDir = SRC_DIR, reportDir = REPORT_DIR, applyFixes = false } = {}) {
    this.allIssues = [];
    this.skippedFiles = [];
    this.appliedFixes = [];
    this.dryRun = !applyFixes; // إذا applyFixes=true، فـ dryRun=false

    console.log(`\n--- 🚀 بدء تحليل وإصلاح المشروع (${this.dryRun ? 'وضع التجريب' : 'وضع التطبيق الحقيقي'}) ---`);
    const startTime = process.hrtime.bigint(); // وقت بدء العملية

    try {
      const files = await this._collectFiles(srcDir);
      console.log(`🔍 تم العثور على ${files.length} ملف كود لتحليله.`);

      for (const filePath of files) {
        await this._tryAnalyze(filePath);
      }

      // تصنيف حسب الخطورة
      const sortedIssues = this.allIssues
        .map((issue, index) => ({
          ...issue,
          priority: issue.severity,
          index, // لإعطاء ترتيب فريد
        }))
        .sort((a, b) => b.priority - a.priority); // الأعنف أولاً

      console.log(`\n✅ انتهى التحليل. تم العثور على ${this.allIssues.length} مشكلة.`);
      if (this.skippedFiles.length > 0) {
        console.warn(`⚠️ تم تخطّي ${this.skippedFiles.length} ملفًا بسبب أخطاء.`);
      }

      // إذا كان وضع التطبيق الحقيقي، قم بتطبيق الإصلاحات
      if (!this.dryRun) {
        console.log('\n🔧 جاري تطبيق الإصلاحات المقترحة...');
        for (const issue of sortedIssues) {
          if (issue.fixable && issue.suggestedFix) {
            try {
              await this._applyFix(issue);
            } catch (error) {
              console.error(`❌ فشل تطبيق الإصلاح للمشكلة ${issue.type} في ${issue.file}: ${error.message}`);
            }
          }
        }
        console.log(`✅ تم تطبيق ${this.appliedFixes.length} إصلاحًا.`);
      }

      // توليد محتوى التقرير
      const mdReportContent = this._generateMarkdownReport(sortedIssues);

      // إنشاء مجلد التقارير إذا لم يكن موجودًا
      await fs.mkdir(reportDir, { recursive: true });

      const reportPath = path.join(reportDir, `repair_summary_${new Date().toISOString().replace(/[:.]/g, '-')}.md`);
      await fs.writeFile(reportPath, mdReportContent, 'utf8');

      const endTime = process.hrtime.bigint(); // وقت انتهاء العملية
      const durationMs = Number(endTime - startTime) / 1_000_000;

      console.log(`\n📄 التقرير تم حفظه بنجاح في: ${reportPath}`);
      const stats = await fs.stat(reportPath);
      console.log(`📏 حجم التقرير: ${stats.size} بايت`);
      console.log(`⏱️ وقت التنفيذ الكلي: ${durationMs.toFixed(2)} مللي ثانية`);

    } catch (err) {
      console.error('❌ فشل في تحليل أو إنشاء التقرير بشكل عام:', err);
    } finally {
      console.log('\n--- 🏁 انتهى تشغيل أداة الإصلاح ---');
    }
  }

  /**
   * يجمع مسارات جميع ملفات الكود في الدليل المحدد.
   * @param {string} dir - المسار للبحث فيه.
   * @returns {Promise<string[]>} مصفوفة بمسارات الملفات الكاملة.
   * @private
   */
  async _collectFiles(dir) {
    const entries = await fs.readdir(dir, { withFileTypes: true });
    let files = [];

    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name);
      if (entry.isDirectory()) {
        files.push(...await this._collectFiles(fullPath));
      } else if (DEFAULT_FILE_EXTENSIONS.includes(path.extname(entry.name).toLowerCase())) {
        files.push(fullPath);
      }
    }
    return files;
  }

  /**
   * يحاول تحليل ملف AST، ويتجاوز الملفات التي تسبب أخطاء.
   * @param {string} filePath - المسار الكامل للملف.
   * @private
   */
  async _tryAnalyze(filePath) {
    try {
      const { issues, ast, content } = await this._enhancedASTAnalysis(filePath);
      issues.forEach(issue => this.allIssues.push({ ...issue, file: path.relative(process.cwd(), filePath) }));
      return { issues, ast, content }; // Return content too for fix application
    } catch (error) {
      this.skippedFiles.push({ file: path.relative(process.cwd(), filePath), reason: error.message });
      console.warn(`⚠️ تم تخطّي الملف ${path.relative(process.cwd(), filePath)} بسبب خطأ في التحليل: ${error.message}`);
      return null;
    }
  }

  /**
   * يقوم بتحليل AST للملف ويجمع المشاكل.
   * @param {string} filePath - المسار الكامل للملف.
   * @returns {Promise<{issues: Array<object>, ast: object, content: string}>}
   * @private
   */
  async _enhancedASTAnalysis(filePath) {
    const issues = [];
    const relativePath = path.relative(process.cwd(), filePath);
    let content;

    try {
      content = await fs.readFile(filePath, 'utf8');
      if (!content.trim()) {
        issues.push(this._createIssue({
          type: 'EmptyFile', severity: SEVERITY_LEVELS.LOW,
          message: 'الملف فارغ أو يحتوي على مسافات بيضاء فقط.',
        }));
        return { issues, ast: null, content };
      }

      const ast = parse(content, {
        sourceType: 'module', // 'script' or 'module'
        plugins: ['jsx', 'typescript'], // يدعم TypeScript و JSX
        errorRecovery: true, // يكمل التحليل حتى لو وجد أخطاء
      });

      if (ast.errors?.length > 0) {
        ast.errors.forEach(err => {
          issues.push(this._createIssue({
            type: 'SyntaxError', severity: SEVERITY_LEVELS.CRITICAL,
            message: 'خطأ تركيبي (Syntax Error) تم اكتشافه.',
            details: err.message, line: err.loc?.line, column: err.loc?.column,
            codeSnippet: this._getCodeSnippet(content, err.loc),
          }));
        });
      }

      // AST Traversal for deeper analysis
      // Note: traverse.default is used due to commonJS vs ESModule interop
      if (traverse && typeof traverse.default === 'function') {
        traverse.default(ast, this._createTraversalVisitors(content, issues));
      } else {
        console.warn(`WARN: @babel/traverse not available or not a function. Skipping AST traversal for ${relativePath}.`);
      }


      return { issues, ast, content };
    } catch (error) {
      throw new AnalysisError(`فشل تحليل AST للملف: ${error.message}`, relativePath, 0);
    }
  }

  /**
   * ينشئ كائن المشكلة بشكل موحد.
   * @param {object} issueData
   * @returns {object}
   * @private
   */
  _createIssue(issueData) {
    return {
      fixable: issueData.fixable || false, // هل يمكن إصلاحه تلقائيًا؟
      suggestedFix: issueData.suggestedFix || null, // اقتراح الإصلاح (نص، أو كود)
      ...issueData,
    };
  }

  /**
   * يولد زوار AST لاكتشاف أنماط المشاكل.
   * @param {string} fileContent - محتوى الملف الأصلي.
   * @param {Array<object>} issues - مصفوفة لتخزين المشاكل المكتشفة.
   * @returns {object}
   * @private
   */
  _createTraversalVisitors(fileContent, issues) {
    const self = this; // الاحتفاظ بمرجع للكائن الحالي

    return {
      // --- Structural and Code Style Issues ---
      EmptyStatement(path) {
        // اكتشاف الفواصل المنقوطة الزائدة
        const loc = path.node.loc;
        if (loc) {
          issues.push(self._createIssue({
            type: 'EmptyStatement', severity: SEVERITY_LEVELS.LOW,
            message: 'تم العثور على فاصلة منقوطة زائدة.',
            line: loc.start.line, column: loc.start.column,
            codeSnippet: self._getCodeSnippet(fileContent, loc),
            fixable: true, suggestedFix: '' // اقتراح: إزالة الفاصلة المنقوطة
          }));
        }
      },

      FunctionDeclaration(path) {
        // اكتشاف الدوال الطويلة
        if (self._isFunctionTooLong(path.node)) {
          issues.push(self._createIssue({
            type: 'LongFunction', severity: SEVERITY_LEVELS.MEDIUM,
            message: 'الدالة تتجاوز الحجم الأقصى الموصى به. يفضل تقسيمها.',
            line: path.node.loc?.start.line, column: path.node.loc?.start.column,
            codeSnippet: self._getCodeSnippet(fileContent, path.node.loc),
            fixable: false, // عادة لا يمكن إصلاح هذا تلقائيًا بشكل موثوق
            suggestedFix: '// CONSIDER REFACTORING: This function is too long. Break it into smaller, more focused functions for better readability and maintainability.'
          }));
        }
      },

      // --- Security and Best Practices Issues ---
      CallExpression(path) {
        // استخدام eval
        if (path.node.callee?.name === 'eval') {
          issues.push(self._createIssue({
            type: 'SecurityRisk-Eval', severity: SEVERITY_LEVELS.HIGH,
            message: 'استخدام دالة `eval()` محظور أو غير موصى به لأسباب أمنية.',
            line: path.node.loc?.start.line, column: path.node.loc?.start.column,
            codeSnippet: self._getCodeSnippet(fileContent, path.node.loc),
            fixable: false, // لا يمكن إصلاحها تلقائيًا دون معرفة النية الحقيقية
            suggestedFix: '// SECURITY ALERT: Avoid using eval(). Consider safer alternatives like parsing JSON or dynamic function calls with known inputs.'
          }));
        }
        // استخدام APIs مهملة
        self._checkForDeprecatedAPIs(path, issues, fileContent);
      },

      MemberExpression(path) {
        // وصول مباشر لـ window.document في سياق Apps Script (Node.js mock for it)
        if (path.node.object?.name === 'window' && path.node.property?.name === 'document') {
          issues.push(self._createIssue({
            type: 'RestrictedAccess-DOM', severity: SEVERITY_LEVELS.HIGH,
            message: 'الوصول المباشر إلى `window.document` غير مسموح به في Google Apps Script. استخدم `HtmlService` بدلاً من ذلك.',
            line: path.node.loc?.start.line, column: path.node.loc?.start.column,
            codeSnippet: self._getCodeSnippet(fileContent, path.node.loc),
            fixable: false,
            suggestedFix: '// APPS SCRIPT CONTEXT: Direct DOM manipulation via `window.document` is not allowed. Use `HtmlService` or pass data to client-side JS.'
          }));
        }
      },

      // --- Contextual and Scope Analysis (Simulated) ---
      VariableDeclarator(path) {
        // اكتشاف المتغيرات العالمية المحتملة (بدون var/let/const)
        // هذا يتطلب تحليلاً معقداً للمجال (scope), هنا هو محاكاة بسيطة
        if (path.node.id.name && !path.scope.hasBinding(path.node.id.name) && path.scope.parent === null) {
          // المتغير معرّف في الجذر وليس له `var`, `let`, `const`
          // هذا افتراضي وقد يكون له إيجابيات كاذبة
          issues.push(self._createIssue({
            type: 'GlobalVariableLeak', severity: SEVERITY_LEVELS.MEDIUM,
            message: `المتغير '${path.node.id.name}' قد يكون متغيرًا عالميًا غير مقصود (Global Leak).`,
            line: path.node.loc?.start.line, column: path.node.loc?.start.column,
            codeSnippet: self._getCodeSnippet(fileContent, path.node.loc),
            fixable: false,
            suggestedFix: `// CONSIDER: Ensure '${path.node.id.name}' is declared with 'const', 'let', or 'var' to prevent global scope pollution.`
          }));
        }
      },
    };
  }

  /**
   * يتحقق مما إذا كانت الدالة طويلة جداً.
   * @param {object} node - عقدة الدالة (FunctionDeclaration, FunctionExpression).
   * @returns {boolean}
   * @private
   */
  _isFunctionTooLong(node) {
    const MAX_FUNCTION_LINES = 50; // الحد الأقصى لعدد أسطر الدالة
    const loc = node.loc;
    if (loc && loc.end && loc.start) {
      return (loc.end.line - loc.start.line) > MAX_FUNCTION_LINES;
    }
    return false;
  }

  /**
   * يجلب مقتطف الكود من الملف بناءً على موقع الخطأ.
   * @param {string} content - محتوى الملف الكامل.
   * @param {object} loc - كائن الموقع (location) من AST.
   * @returns {string|null} مقتطف الكود.
   * @private
   */
  _getCodeSnippet(content, loc) {
    if (!loc || !loc.start || !loc.end) return null;
    const lines = content.split('\n');
    // جلب سطر واحد قبل، سطر الخطأ، وسطر واحد بعد
    const startLineIdx = Math.max(0, loc.start.line - 2);
    const endLineIdx = Math.min(lines.length, loc.end.line + 1);
    const snippetLines = lines.slice(startLineIdx, endLineIdx);

    // إضافة أرقام الأسطر لتسهيل التحديد
    return snippetLines.map((line, index) => {
      const lineNumber = startLineIdx + index + 1;
      const isErrorLine = (lineNumber >= loc.start.line && lineNumber <= loc.end.line);
      return `${isErrorLine ? ' >' : '  '} ${lineNumber.toString().padStart(4, ' ')} | ${line}`;
    }).join('\n');
  }

  /**
   * يتحقق من استخدام APIs المهملة.
   * @param {object} path - مسار AST.
   * @param {Array<object>} issues - مصفوفة لتخزين المشاكل المكتشفة.
   * @param {string} fileContent - محتوى الملف الكامل.
   * @private
   */
  _checkForDeprecatedAPIs(path, issues, fileContent) {
    const deprecatedAPIs = ['escape', 'unescape', 'Buffer.prototype.slice', 'new Buffer']; // أمثلة
    if (path.node.callee?.name && deprecatedAPIs.includes(path.node.callee.name)) {
      issues.push(this._createIssue({
        type: 'DeprecatedAPI', severity: SEVERITY_LEVELS.MEDIUM,
        message: `استخدام API مهملة: "${path.node.callee.name}"`,
        line: path.node.loc?.start.line, column: path.node.loc?.start.column,
        codeSnippet: this._getCodeSnippet(fileContent, path.node.loc),
        fixable: false,
        suggestedFix: `// DEPRECATED: Consider using 'encodeURIComponent' / 'decodeURIComponent' or more modern Buffer APIs.`
      }));
    }
  }

  /**
   * يطبق الإصلاح المقترح على الملف.
   * هذا تنفيذ مبسط يعتمد على استبدال السلاسل. للتعديلات المعقدة، يتطلب معالجة AST عميقة.
   * @param {object} issue - كائن المشكلة المراد إصلاحها.
   * @returns {Promise<void>}
   * @private
   */
  async _applyFix(issue) {
    if (!issue.fixable || !issue.suggestedFix || !issue.file || !issue.line) {
      throw new Error(`Cannot apply fix for unfixable, missing fix, or incomplete issue: ${JSON.stringify(issue)}`);
    }

    const filePath = path.join(process.cwd(), issue.file);
    let fileContent;
    try {
      fileContent = await fs.readFile(filePath, 'utf8');
    } catch (e) {
      throw new FixApplicationError(`Failed to read file ${filePath} for fix application.`, e);
    }

    const backupPath = await this._createRestorePoint(filePath); // إنشاء نقطة استعادة

    let newContent = fileContent;

    // تطبيق الإصلاحات البسيطة (مثل إزالة الفواصل المنقوطة الزائدة)
    if (issue.type === 'EmptyStatement' && issue.suggestedFix === '') {
        const lines = newContent.split('\n');
        if (lines[issue.line - 1]) {
            lines[issue.line - 1] = lines[issue.line - 1].replace(/;$/, ''); // إزالة الفاصلة المنقوطة في نهاية السطر
            newContent = lines.join('\n');
        }
    } else {
        // للمشاكل الأكثر تعقيدًا، سنكتفي بإضافة تعليق أو تعديل بسيط
        // هذا الجزء سيتطلب منطقًا أكثر تعقيدًا يعتمد على AST مباشرة ليكون آمنًا
        // في هذا المثال، سنضع تعليقاً في سطر المشكلة إذا كان هناك اقتراح إصلاح نصي
        const lines = newContent.split('\n');
        if (lines[issue.line - 1] && typeof issue.suggestedFix === 'string' && issue.suggestedFix.startsWith('//')) {
            lines[issue.line - 1] = `${issue.suggestedFix} ${lines[issue.line - 1]}`;
            newContent = lines.join('\n');
        } else if (issue.codeSnippet && issue.suggestedFix) {
            // محاولة استبدال المقتطف بالكود المقترح
            newContent = newContent.replace(issue.codeSnippet.trim(), issue.suggestedFix.trim());
        }
    }

    try {
      await fs.writeFile(filePath, newContent, 'utf8');
      this.appliedFixes.push({ file: issue.file, type: issue.type, backup: backupPath });
      console.log(`✅ تم تطبيق الإصلاح لـ ${issue.type} في ${issue.file} (نقطة استعادة: ${backupPath}).`);
    } catch (e) {
      console.error(`❌ فشل الكتابة إلى الملف بعد الإصلاح: ${filePath}. جاري التراجع...`);
      await fs.copyFile(backupPath, filePath); // التراجع
      await fs.unlink(backupPath); // حذف نقطة الاستعادة الفاشلة
      throw new FixApplicationError(`Failed to write fixed content to ${filePath}. Rolled back.`, e);
    }
  }

  /**
   * ينشئ نقطة استعادة (backup) للملف قبل التعديل.
   * @param {string} filePath - المسار الكامل للملف.
   * @returns {Promise<string>} مسار ملف النسخة الاحتياطية.
   * @private
   */
  async _createRestorePoint(filePath) {
    const backupPath = `${filePath}.bak`;
    try {
      await fs.copyFile(filePath, backupPath);
      return backupPath;
    } catch (error) {
      throw new FixApplicationError(`فشل إنشاء نقطة استعادة لـ: ${filePath}`, error);
    }
  }

  /**
   * يولد تقرير Markdown شامل.
   * @param {Array<object>} issues - المشاكل المكتشفة.
   * @returns {string} محتوى التقرير بصيغة Markdown.
   * @private
   */
  _generateMarkdownReport(issues) {
    let md = `# 🛠️ تقرير الإصلاح الفني - ${new Date().toLocaleString('ar-SA')}\n\n`;
    md += `**الحالة:** ${this.dryRun ? 'وضع التجريب (لم تُطبق إصلاحات)' : `تم تطبيق الإصلاحات لـ ${this.appliedFixes.length} مشكلة.`}\n`;
    md += `**عدد المشاكل المكتشفة:** ${this.allIssues.length}\n`;
    md += `**عدد الملفات التي تم تخطّيها:** ${this.skippedFiles.length}\n\n`;

    if (issues.length > 0) {
      md += `## ⚠️ المشاكل المكتشفة (${issues.length})\n\n`;
      md += `| الأولوية | نوع المشكلة       | الخطورة | الملف               | السطر | قابل للإصلاح | التفاصيل |\n`;
      md += `|----------|--------------------|----------|---------------------|--------|-------------|-----------|\n`;
      issues.forEach((issue, i) => {
        md += `| #${i + 1} | ${issue.type} | ${issue.severity} | ${issue.file} | ${issue.line ?? '-'} | ${issue.fixable ? '✅' : '🚫'} | ${issue.message} |\n`;
      });

      md += `\n\n## 📝 تفاصيل المشاكل واقتراحات الإصلاح\n\n`;
      issues.forEach(issue => {
        md += `### ${issue.type} في ${issue.file} (السطر: ${issue.line ?? '-'}) - الخطورة: ${issue.severity}\n`;
        md += `**الوصف:** ${issue.message}\n`;
        if (issue.details) md += `**تفاصيل فنية:** ${issue.details}\n`;
        if (issue.codeSnippet) {
          md += `\n\`\`\`javascript\n${issue.codeSnippet}\n\`\`\`\n`;
        }
        if (issue.fixable) {
          md += `**قابل للإصلاح التلقائي:** ✅\n`;
          if (issue.suggestedFix) {
            md += `**الاقتراح:**\n\`\`\`\n${issue.suggestedFix}\n\`\`\`\n`;
          }
        } else {
          md += `**قابل للإصلاح التلقائي:** 🚫\n`;
          if (issue.suggestedFix) {
            md += `**الاقتراح اليدوي:**\n\`\`\`\n${issue.suggestedFix}\n\`\`\`\n`;
          }
        }
        md += `\n---\n\n`;
      });
    } else {
      md += `## ✅ لا توجد مشاكل تستدعي التقرير! عمل رائع.\n\n`;
    }

    if (this.skippedFiles.length > 0) {
      md += `## ⚠️ ملفات تم تخطّيها (${this.skippedFiles.length})\n\n`;
      md += `| الملف                   | السبب                                        |\n`;
      md += `|--------------------------|-----------------------------------------------|\n`;
      this.skippedFiles.forEach(skipped => {
        md += `| ${skipped.file} | ${skipped.reason} |\n`;
      });
      md += `\n\n`;
    }

    if (this.appliedFixes.length > 0) {
      md += `## 🔧 الإصلاحات التي تم تطبيقها (${this.appliedFixes.length})\n\n`;
      md += `| الملف                   | نوع المشكلة       | نقطة الاستعادة |\n`;
      md += `|--------------------------|--------------------|----------------|\n`;
      this.appliedFixes.forEach(fix => {
        md += `| ${fix.file} | ${fix.type} | ${fix.backup} |\n`;
      });
      md += `\n\n`;
    }

    md += `\n\n--- نهاية التقرير ---`;
    return md;
  }
}

// --- Usage Example and CLI Integration ---
// هذا الجزء يتم تشغيله عند تنفيذ الملف في Node.js
async function runAdvancedRepair() {
  const args = process.argv.slice(2);
  const applyFixes = args.includes('--apply-fixes') || args.includes('-f');
  const srcDirArg = args.find(arg => arg.startsWith('--src-dir='));
  const reportDirArg = args.find(arg => arg.startsWith('--report-dir='));

  const options = {
    applyFixes: applyFixes,
    srcDir: srcDirArg ? srcDirArg.split('=')[1] : SRC_DIR,
    reportDir: reportDirArg ? reportDirArg.split('=')[1] : REPORT_DIR,
  };

  const agent = new AdvancedRepairAgent();
  await agent.scanAndReport(options);
}

// تشغيل الوظيفة الرئيسية عند استدعاء الملف مباشرة
if (require.main === module) {
  runAdvancedRepair();
}

// *************************************************************************************************
// --- END OF FILE: src/dev_tools/advanced_repair.js ---
// *************************************************************************************************