extend type Query {
  """
  ✨ Look up a single `AIInteraction` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  aIInteraction(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: AIInteraction_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: AIInteraction_FirstRow
  ): AIInteraction @fdc_generated(from: "AIInteraction", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Request` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  request(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Request_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Request_FirstRow
  ): Request @fdc_generated(from: "Request", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Service` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  service(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Service_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Service_FirstRow
  ): Service @fdc_generated(from: "Service", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `SubscriptionType` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  subscriptionType(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SubscriptionType_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SubscriptionType_FirstRow
  ): SubscriptionType @fdc_generated(from: "SubscriptionType", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `UserSubscription` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  userSubscription(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: UserSubscription_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: UserSubscription_FirstRow
  ): UserSubscription @fdc_generated(from: "UserSubscription", purpose: QUERY_SINGLE)
  """
  ✨ List `AIInteraction` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  aIInteractions(
    """
    Filter condition to narrow down the query results.
    """
    where: AIInteraction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [AIInteraction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: AIInteraction_Having
  ): [AIInteraction!]! @fdc_generated(from: "AIInteraction", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Request` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  requests(
    """
    Filter condition to narrow down the query results.
    """
    where: Request_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Request_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Request_Having
  ): [Request!]! @fdc_generated(from: "Request", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Service` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  services(
    """
    Filter condition to narrow down the query results.
    """
    where: Service_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Service_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Service_Having
  ): [Service!]! @fdc_generated(from: "Service", purpose: QUERY_MULTIPLE)
  """
  ✨ List `SubscriptionType` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  subscriptionTypes(
    """
    Filter condition to narrow down the query results.
    """
    where: SubscriptionType_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SubscriptionType_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SubscriptionType_Having
  ): [SubscriptionType!]! @fdc_generated(from: "SubscriptionType", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
  """
  ✨ List `UserSubscription` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  userSubscriptions(
    """
    Filter condition to narrow down the query results.
    """
    where: UserSubscription_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [UserSubscription_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: UserSubscription_Having
  ): [UserSubscription!]! @fdc_generated(from: "UserSubscription", purpose: QUERY_MULTIPLE)
}
